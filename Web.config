<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your Node.js application, please visit
  http://go.microsoft.com/fwlink/?LinkId=290972
  -->
<configuration>
  <appSettings>
    <remove key="WEBSITE_NODE_DEFAULT_VERSION" />
    <add key="WEBSITE_NODE_DEFAULT_VERSION" value="10.14.1" />
    <!--
		<add key="StorageAccountName" value="" />
		<add key="StorageAccountKey" value="" />
		<add key="ServiceBusNamespace" value="" />
		<add key="ServiceBusIssuerName" value="" />
		<add key="ServiceBusIssuerSecretKey" value="" />
		-->
  </appSettings>
  <system.web>
    <!-- Remote debugging (Azure Website with git deploy): uncomment below -->
    <!-- <httpRuntime targetFramework="4.5"/> -->
    <customErrors mode="Off"/>
  </system.web>
  <system.webServer>
    <!-- mimeMap enables IIS to serve particular file types as specified by fileExtension. -->
    <staticContent>
      <!-- Cache for 30 days -->
      <clientCache cacheControlMode="UseMaxAge" cacheControlCustom="public" cacheControlMaxAge="30.00:00:00"/>
      <remove fileExtension=".svg" />
      <remove fileExtension=".woff"/>
      <remove fileExtension=".woff2"/>
      <remove fileExtension=".mp4"/>
      <remove fileExtension=".json"/>
      <remove fileExtension=".apk" />
      <remove fileExtension="." />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
      <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      <mimeMap fileExtension=".mp4" mimeType="video/mp4" />
      <mimeMap fileExtension=".json" mimeType="application/json" />
      <mimeMap fileExtension=".apk" mimeType="application/vnd.android.package-archive" />
      <mimeMap fileExtension="." mimeType="text/html" />
    </staticContent>

    <modules runAllManagedModulesForAllRequests="false" />

    <httpErrors existingResponse="PassThrough" />

    <!-- Web.Debug.config adds attributes to this to enable remote debugging when publishing in Debug configuration. -->
    <iisnode watchedFiles="web.config;*.js;routes\*.js;views\*.ejs"/>

    <!-- Remote debugging (Azure Website with git deploy): Comment out iisnode above, and uncomment iisnode below. -->
    <!--<iisnode watchedFiles="web.config;*.js;routes\*.js;views\*.ejs"
			  loggingEnabled="true"
			  devErrorsEnabled="true"
			  nodeProcessCommandLine="node.exe &#45;&#45;debug"/>-->

    <!-- indicates that the server.js file is a Node.js application to be handled by the iisnode module -->
    <handlers>
      <add name="iisnode" path="app.js" verb="*" modules="iisnode" />

      <!-- Remote debugging (Azure Website with git deploy): Uncomment NtvsDebugProxy handler below.
			Additionally copy Microsoft.NodejsTools.WebRole to 'bin' from the Remote Debug Proxy folder.-->
      <!--<add name="NtvsDebugProxy" path="ntvs-debug-proxy/40eda2d4-a882-4f60-9753-9a3a6c2d8e52" verb="*" resourceType="Unspecified"
			type="Microsoft.NodejsTools.Debugger.WebSocketProxy, Microsoft.NodejsTools.WebRole"/>-->
    </handlers>
    <httpProtocol>
      <customHeaders>
        <clear />
        <add name="X-Frame-Options" value="SAMEORIGIN" />
        <add name="X-XSS-Protection" value="1; mode=block" />
        <add name="X-Content-Type-Options" value="nosniff" />
      </customHeaders>
    </httpProtocol>
    <rewrite>
      <rules>
        <clear />
        <!-- Remote debugging (Azure Website with git deploy): Uncomment the NtvsDebugProxy rule below. -->
        <!--<rule name="NtvsDebugProxy" enabled="true" stopProcessing="true">
					<match url="^ntvs-debug-proxy/.*"/>
				</rule>-->
        <rule name="app" enabled="true" patternSyntax="ECMAScript" stopProcessing="true">
          <match url="iisnode.+" negate="true" />
          <conditions logicalGrouping="MatchAll" trackAllCaptures="false" />
          <action type="Rewrite" url="app.js" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>
